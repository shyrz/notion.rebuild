{"version":3,"sources":["utils/CodeGenerator.js","App.js","index.js"],"names":["getId","url","id","URL","pathname","slice","match","e","Collapse","Panel","App","useState","slugs","setSlugs","domain","setDomain","domainURL","setDomainURL","pageTitle","setPageTitle","pageDescription","setPageDescription","customFonts","setCustomFonts","customScripts","setCustomScripts","setDarkMode","copied","setCopied","code","data","replace","length","map","pageUrl","join","CodeGenerator","useRef","className","name","layout","onFinish","values","console","log","Item","label","placeholder","onChange","target","value","List","fields","add","remove","index","rules","required","message","Group","compact","prefix","handleSlug","style","width","handleSlugURL","type","icon","MinusCircleOutlined","onClick","deleteSlug","danger","block","PlusOutlined","TextArea","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","isDarkMode","text","onCopy","CheckCircleOutlined","language","prism","customStyle","maxHeight","border","borderRadius","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f42fdb31.chunk.js","sourcesContent":["function getId(url) {\n\ttry {\n\t\tconst id = new URL(url).pathname.slice(-32);\n\t\tif (id.match(/[0-9a-f]{32}/)) return id;\n\t\treturn '';\n\t} catch (e) {\n\t\treturn '';\n\t}\n}\n\nexport default function CodeGenerator(data) {\n\n\tconst {\n\t\tdomain,\n\t\tdomainURL,\n\t\tslugs,\n\t\tpageTitle,\n\t\tpageDescription,\n\t\tcustomFonts,\n\t\tcustomScripts\n\t} = data;\n\tlet url = domain.replace(/^https?:\\/\\//ig, '');\n\tif (url.slice(-1) === '/') url = url.slice(0, url.length - 1);\n\t\t\n\treturn (\n`/* CONFIGURATION STARTS HERE */\n/* Step 1: enter your domain name like fruitionsite.com */\nconst MY_DOMAIN = '${url}';\n\n/*\n * Step 2: enter your URL slug to page ID mapping\n * The key on the left is the slug (without the slash)\n * The value on the right is the Notion page ID\n */\nconst SLUG_TO_PAGE = {\n\t'': '${getId(domainURL)}',\n${slugs.map(([pageUrl, domainURL]) => {\n\tconst id = getId(domainURL);\n\tif (!id || !pageUrl) return '';\n\treturn `    '${pageUrl}': '${id}',\\n`;\n}).join('')}\n};\n\n/* Step 3: enter your page title and description for SEO purposes */\nconst PAGE_TITLE = '${pageTitle || ''}';\nconst PAGE_DESCRIPTION = '${pageDescription || ''}';\n\n/* Step 4: enter a Google Font name, you can choose from https://fonts.google.com */\nconst CUSTOM_FONTS = '${customFonts || ''}';\n\n/* Step 5: enter any custom scripts you'd like */\nconst CUSTOM_SCRIPTS = \\`${customScripts || ''}\\`;\n\n/* CONFIGURATION ENDS HERE */\n\nconst PAGE_TO_SLUG = {};\nconst slugs = [];\nconst pages = [];\nObject.keys(SLUG_TO_PAGE).forEach(slug => {\n\tconst page = SLUG_TO_PAGE[slug];\n\tslugs.push(slug);\n\tpages.push(page);\n\tPAGE_TO_SLUG[page] = slug;\n});\n\naddEventListener('fetch', event => {\n\tevent.respondWith(fetchAndApply(event.request));\n});\n\nfunction generateSitemap() {\n\tlet sitemap = '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">';\n\tslugs.forEach(\n\t\t(slug) =>\n\t\t\t(sitemap +=\n\t\t\t\t'<url><loc>https://' + MY_DOMAIN + '/' + slug + '</loc></url>')\n\t);\n\tsitemap += '</urlset>';\n\treturn sitemap;\n}\n\nconst corsHeaders = {\n\t'Access-Control-Allow-Origin': '*',\n\t'Access-Control-Allow-Methods': 'GET, HEAD, POST, PUT, OPTIONS',\n\t'Access-Control-Allow-Headers': 'Content-Type',\n};\n\nfunction handleOptions(request) {\n\tif (request.headers.get('Origin') !== null &&\n\t\trequest.headers.get('Access-Control-Request-Method') !== null &&\n\t\trequest.headers.get('Access-Control-Request-Headers') !== null) {\n\t\t// Handle CORS pre-flight request.\n\t\treturn new Response(null, {\n\t\t\theaders: corsHeaders\n\t\t});\n\t} else {\n\t\t// Handle standard OPTIONS request.\n\t\treturn new Response(null, {\n\t\t\theaders: {\n\t\t\t\t'Allow': 'GET, HEAD, POST, PUT, OPTIONS',\n\t\t\t}\n\t\t});\n\t}\n}\n\nasync function fetchAndApply(request) {\n\tif (request.method === 'OPTIONS') {\n\t\treturn handleOptions(request);\n\t}\n\tlet url = new URL(request.url);\n\turl.hostname = 'www.notion.so';\n\tif (url.pathname === '/robots.txt') {\n\t\treturn new Response('Sitemap: https://' + MY_DOMAIN + '/sitemap.xml');\n\t}\n\tif (url.pathname === '/sitemap.xml') {\n\t\tlet response = new Response(generateSitemap());\n\t\tresponse.headers.set('content-type', 'application/xml');\n\t\treturn response;\n\t}\n\tlet response;\n\tif (url.pathname.startsWith('/app') && url.pathname.endsWith('js')) {\n\t\tresponse = await fetch(url.toString());\n\t\tlet body = await response.text();\n\t\tresponse = new Response(body.replace(/www.notion.so/g, MY_DOMAIN).replace(/notion.so/g, MY_DOMAIN), response);\n\t\tresponse.headers.set('Content-Type', 'application/x-javascript');\n\t\treturn response;\n\t} else if ((url.pathname.startsWith('/api'))) {\n\t\t// Forward API\n\t\tresponse = await fetch(url.toString(), {\n\t\t\tbody: request.body,\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json;charset=UTF-8',\n\t\t\t\t'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36'\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t});\n\t\tresponse = new Response(response.body, response);\n\t\tresponse.headers.set('Access-Control-Allow-Origin', '*');\n\t\treturn response;\n\t} else if (slugs.indexOf(url.pathname.slice(1)) > -1) {\n\t\tconst pageId = SLUG_TO_PAGE[url.pathname.slice(1)];\n\t\treturn Response.redirect('https://' + MY_DOMAIN + '/' + pageId, 301);\n\t} else {\n\t\tresponse = await fetch(url.toString(), {\n\t\t\tbody: request.body,\n\t\t\theaders: request.headers,\n\t\t\tmethod: request.method,\n\t\t});\n\t\tresponse = new Response(response.body, response);\n\t\tresponse.headers.delete('Content-Security-Policy');\n\t\tresponse.headers.delete('X-Content-Security-Policy');\n\t}\n\n\treturn appendJavascript(response, SLUG_TO_PAGE);\n}\n\nclass MetaRewriter {\n\telement(element) {\n\t\tif (PAGE_TITLE !== '') {\n\t\t\tif (element.getAttribute('property') === 'og:title'\n\t\t\t\t|| element.getAttribute('name') === 'twitter:title') {\n\t\t\t\telement.setAttribute('content', PAGE_TITLE);\n\t\t\t}\n\t\t\tif (element.tagName === 'title') {\n\t\t\t\telement.setInnerContent(PAGE_TITLE);\n\t\t\t}\n\t\t}\n\t\tif (PAGE_DESCRIPTION !== '') {\n\t\t\tif (element.getAttribute('name') === 'description'\n\t\t\t\t|| element.getAttribute('property') === 'og:description'\n\t\t\t\t|| element.getAttribute('name') === 'twitter:description') {\n\t\t\t\telement.setAttribute('content', PAGE_DESCRIPTION);\n\t\t\t}\n\t\t}\n\t\tif (element.getAttribute('property') === 'og:url'\n\t\t\t|| element.getAttribute('name') === 'twitter:url') {\n\t\t\telement.setAttribute('content', MY_DOMAIN);\n\t\t}\n\t\tif (element.getAttribute('name') === 'apple-itunes-app') {\n\t\t\telement.remove();\n\t\t}\n\t}\n}\n\nclass HeadRewriter {\n\telement(element) {\n\t\tif (CUSTOM_FONTS !== '') {\n\t\t\telement.append(\\`<link href=\"https://fonts.googleapis.com/css?family=\\${CUSTOM_FONTS.replace(' ', '+')}:Regular,Bold,Italic&display=swap\" rel=\"stylesheet\">\n\t\t\t<style>* { font-family: \"\\${CUSTOM_FONTS}\" !important; }</style>\\`, {\n\t\t\t\thtml: true\n\t\t\t});\n\t\t}\n\t\telement.append(\\`<style>\n\t\tdiv.notion-topbar > div > div:nth-child(3) { display: none !important; }\n\t\tdiv.notion-topbar > div > div:nth-child(4) { display: none !important; }\n\t\tdiv.notion-topbar > div > div:nth-child(5) { display: none !important; }\n\t\tdiv.notion-topbar > div > div:nth-child(6) { display: none !important; }\n\t\tdiv.notion-topbar-mobile > div:nth-child(3) { display: none !important; }\n\t\tdiv.notion-topbar-mobile > div:nth-child(4) { display: none !important; }\n\t\tdiv.notion-topbar > div > div:nth-child(1n).toggle-mode { display: block !important; }\n\t\tdiv.notion-topbar-mobile > div:nth-child(1n).toggle-mode { display: block !important; }\n\t\t</style>\\`, {\n\t\t\thtml: true\n\t\t})\n\t}\n}\n\nclass BodyRewriter {\n\tconstructor(SLUG_TO_PAGE) {\n\t\tthis.SLUG_TO_PAGE = SLUG_TO_PAGE;\n\t}\n\telement(element) {\n\t\telement.append(\\`<div style=\"display:none\">Powered by <a href=\"http://fruitionsite.com\">Fruition</a></div>\n\t\t<script>\n\t\tconst SLUG_TO_PAGE = \\${JSON.stringify(this.SLUG_TO_PAGE)};\n\t\tconst PAGE_TO_SLUG = {};\n\t\tconst slugs = [];\n\t\tconst pages = [];\n\t\tconst el = document.createElement('div');\n\t\tlet redirected = false;\n\t\tObject.keys(SLUG_TO_PAGE).forEach(slug => {\n\t\t\tconst page = SLUG_TO_PAGE[slug];\n\t\t\tslugs.push(slug);\n\t\t\tpages.push(page);\n\t\t\tPAGE_TO_SLUG[page] = slug;\n\t\t});\n\t\tfunction getPage() {\n\t\t\treturn location.pathname.slice(-32);\n\t\t}\n\t\tfunction getSlug() {\n\t\t\treturn location.pathname.slice(1);\n\t\t}\n\t\tfunction updateSlug() {\n\t\t\tconst slug = PAGE_TO_SLUG[getPage()];\n\t\t\tif (slug != null) {\n\t\t\t\thistory.replaceState(history.state, '', '/' + slug);\n\t\t\t}\n\t\t}\n\t\tfunction onDark() {\n\t\t\tel.innerHTML = '<div title=\"Change to Light Mode\" style=\"margin-left: auto; margin-right: 14px; min-width: 0px;\"><div role=\"button\" tabindex=\"0\" style=\"user-select: none; transition: background 120ms ease-in 0s; cursor: pointer; border-radius: 44px;\"><div style=\"display: flex; flex-shrink: 0; height: 14px; width: 26px; border-radius: 44px; padding: 2px; box-sizing: content-box; background: rgb(46, 170, 220); transition: background 200ms ease 0s, box-shadow 200ms ease 0s;\"><div style=\"width: 14px; height: 14px; border-radius: 44px; background: white; transition: transform 200ms ease-out 0s, background 200ms ease-out 0s; transform: translateX(12px) translateY(0px);\"></div></div></div></div>';\n\t\t\tdocument.body.classList.add('dark');\n\t\t\t__console.environment.ThemeStore.setState({ mode: 'dark' });\n\t\t};\n\t\tfunction onLight() {\n\t\t\tel.innerHTML = '<div title=\"Change to Dark Mode\" style=\"margin-left: auto; margin-right: 14px; min-width: 0px;\"><div role=\"button\" tabindex=\"0\" style=\"user-select: none; transition: background 120ms ease-in 0s; cursor: pointer; border-radius: 44px;\"><div style=\"display: flex; flex-shrink: 0; height: 14px; width: 26px; border-radius: 44px; padding: 2px; box-sizing: content-box; background: rgba(135, 131, 120, 0.3); transition: background 200ms ease 0s, box-shadow 200ms ease 0s;\"><div style=\"width: 14px; height: 14px; border-radius: 44px; background: white; transition: transform 200ms ease-out 0s, background 200ms ease-out 0s; transform: translateX(0px) translateY(0px);\"></div></div></div></div>';\n\t\t\tdocument.body.classList.remove('dark');\n\t\t\t__console.environment.ThemeStore.setState({ mode: 'light' });\n\t\t}\n\t\tfunction toggle() {\n\t\t\tif (document.body.classList.contains('dark')) {\n\t\t\t\tonLight();\n\t\t\t} else {\n\t\t\t\tonDark();\n\t\t\t}\n\t\t}\n\t\tfunction addDarkModeButton(device) {\n\t\t\tconst nav = device === 'web' ? document.querySelector('.notion-topbar').firstChild : document.querySelector('.notion-topbar-mobile');\n\t\t\tel.className = 'toggle-mode';\n\t\t\tel.addEventListener('click', toggle);\n\t\t\tnav.appendChild(el);\n\t\t\tonLight();\n\t\t}\n\t\tconst observer = new MutationObserver(function() {\n\t\t\tif (redirected) return;\n\t\t\tconst nav = document.querySelector('.notion-topbar');\n\t\t\tconst mobileNav = document.querySelector('.notion-topbar-mobile');\n\t\t\tif (nav && nav.firstChild && nav.firstChild.firstChild\n\t\t\t\t|| mobileNav && mobileNav.firstChild) {\n\t\t\t\tredirected = true;\n\t\t\t\tupdateSlug();\n\t\t\t\taddDarkModeButton(nav ? 'web' : 'mobile');\n\t\t\t\tconst onpopstate = window.onpopstate;\n\t\t\t\twindow.onpopstate = function() {\n\t\t\t\t\tif (slugs.includes(getSlug())) {\n\t\t\t\t\t\tconst page = SLUG_TO_PAGE[getSlug()];\n\t\t\t\t\t\tif (page) {\n\t\t\t\t\t\t\thistory.replaceState(history.state, 'bypass', '/' + page);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tonpopstate.apply(this, [].slice.call(arguments));\n\t\t\t\t\tupdateSlug();\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\tobserver.observe(document.querySelector('#notion-app'), {\n\t\t\tchildList: true,\n\t\t\tsubtree: true,\n\t\t});\n\t\tconst replaceState = window.history.replaceState;\n\t\twindow.history.replaceState = function(state) {\n\t\t\tif (arguments[1] !== 'bypass' && slugs.includes(getSlug())) return;\n\t\t\treturn replaceState.apply(window.history, arguments);\n\t\t};\n\t\tconst pushState = window.history.pushState;\n\t\twindow.history.pushState = function(state) {\n\t\t\tconst dest = new URL(location.protocol + location.host + arguments[2]);\n\t\t\tconst id = dest.pathname.slice(-32);\n\t\t\tif (pages.includes(id)) {\n\t\t\t\targuments[2] = '/' + PAGE_TO_SLUG[id];\n\t\t\t}\n\t\t\treturn pushState.apply(window.history, arguments);\n\t\t};\n\t\tconst open = window.XMLHttpRequest.prototype.open;\n\t\twindow.XMLHttpRequest.prototype.open = function() {\n\t\t\targuments[1] = arguments[1].replace('\\${MY_DOMAIN}', 'www.notion.so');\n\t\t\treturn open.apply(this, [].slice.call(arguments));\n\t\t};\n\t</script>\\${CUSTOM_SCRIPTS}\\`, {\n\t\t\thtml: true\n\t\t});\n\t}\n}\n\nasync function appendJavascript(res, SLUG_TO_PAGE) {\n\treturn new HTMLRewriter()\n\t\t.on('title', new MetaRewriter())\n\t\t.on('meta', new MetaRewriter())\n\t\t.on('head', new HeadRewriter())\n\t\t.on('body', new BodyRewriter(SLUG_TO_PAGE))\n\t\t.transform(res);\n}`\n\t);\n}\n","import React, { useState, useRef } from 'react';\nimport {\n  Collapse,\n  Form,\n  Switch,\n  Button,\n  Input\n} from 'antd';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport CopyToClipboard from 'react-copy-to-clipboard';\n\nimport { MinusCircleOutlined, PlusOutlined, CheckCircleOutlined, CheckOutlined, CloseOutlined } from '@ant-design/icons';\n\n\nimport CodeGenerator from './utils/CodeGenerator'\nimport './App.less';\n\nconst { Panel } = Collapse;\n\nexport default function App() {\n\n  // Hooks\n  const [slugs, setSlugs] = useState([]);\n  const [domain, setDomain] = useState(\"\");\n  const [domainURL, setDomainURL] = useState(\"\");\n  const [pageTitle, setPageTitle] = useState(\"\");\n  const [pageDescription, setPageDescription] = useState(\"\");\n  const [customFonts, setCustomFonts] = useState(\"\");\n  const [customScripts, setCustomScripts] = useState(\"\");\n  const [isDarkMode, setDarkMode] = useState(false);\n  // const [optional, setOptional] = useState(false);\n  const [copied, setCopied] = useState(false);\n\n  // Handles  \n  const handleDomain = e => {\n    setDomain(e.target.value);\n    setCopied(false);\n  };\n\n  const handleDomainURL = e => {\n    setDomainURL(e.target.value);\n    setCopied(false);\n  };\n\n  const handlePageTitle = e => {\n    setPageTitle(e.target.value);\n    setCopied(false);\n  };\n\n  const handlePageDescription = e => {\n    setPageDescription(e.target.value);\n    setCopied(false);\n  };\n  const handleCustomFonts = e => {\n    setCustomFonts(e.target.value);\n    setCopied(false);\n  };\n  const handleCustomScripts = e => {\n    setCustomScripts(e.target.value);\n    setCopied(false);\n  };\n  const addSlug = () => {\n    setSlugs([...slugs, [\"\", \"\"]]);\n    setCopied(false);\n  };\n  const deleteSlug = index => {\n    setSlugs([...slugs.slice(0, index), ...slugs.slice(index + 1)]);\n    setCopied(false);\n  };\n  const handleSlug = (value, index) => {\n    setSlugs([\n      ...slugs.slice(0, index),\n      [value, slugs[index][1]],\n      ...slugs.slice(index + 1)\n    ]);\n    setCopied(false);\n  };\n  const handleSlugURL = (value, index) => {\n    setSlugs([\n      ...slugs.slice(0, index),\n      [slugs[index][0], value],\n      ...slugs.slice(index + 1)\n    ]);\n    setCopied(false);\n  };\n  const handleDarkMode = isDarkMode => {\n    setDarkMode(isDarkMode);\n  };\n  // const handleOptional = () => {\n  //   setOptional(!optional);\n  // };\n\n  const code = CodeGenerator({\n    domain,\n    domainURL,\n    slugs,\n    pageTitle,\n    pageDescription,\n    customFonts,\n    customScripts\n  });\n  const codes = useRef(\"\");\n  const copy = () => {\n    // codes.current.select();\n    console.log(codes.current);\n    document.execCommand(\"copy\");\n    setCopied(true);\n  };\n\n\n\n\n  const onFormFinish = values => {\n    console.log('Received values of form:', values);\n  };\n\n  return (\n    <div className=\"App\">\n      <Form\n        name=\"code-generate-form\"\n        layout=\"vertical\"\n        onFinish={onFormFinish}\n      >\n\n        <Form.Item label=\"Domain\">\n          <Input\n            placeholder=\"example.com\"\n            onChange={handleDomain}\n          />\n        </Form.Item>\n\n        <Form.Item label=\"Notion URL for Domain\">\n          <Input\n            placeholder=\"https://www.notion.so/Notion-Rebuild-adeb571cc8004db19f2a425f19eab678\"\n            onChange={handleDomainURL}\n          />\n        </Form.Item>\n\n        \n\n        <Form.Item label=\"Pretty Links\">\n          <Form.List>\n            {(fields, { add, remove }) => {\n              return (\n                <>\n                  {slugs.map(([slug, slugURL], index) => {\n                    return (\n                      <>\n                        <Form.Item\n                          // {...slug}\n                          // name={[slug.name, 'slug']}\n                          // fieldKey={[slug.fieldKey, 'slug']}\n                          rules={[{ required: true, message: 'Missing Slug' }]}\n                        >\n                          <Input.Group compact>\n                            <Input\n                              prefix=\"/\"\n                              placeholder=\"slug\"\n                              onChange={e => handleSlug(e.target.value, index)}\n                              style={{ width: '30%' }}\n                            />\n                            <Input\n                              placeholder=\"URL\"\n                              onChange={e => handleSlugURL(e.target.value, index)}\n                              style={{ width: 'calc(70% - 32px)' }}\n                            />\n                            <Button\n                              type=\"text\"\n                              icon={<MinusCircleOutlined />}\n                              style={{ width: '32px' }}\n                              onClick={() => { deleteSlug(index) }} \n                              danger\n                            />\n                          </Input.Group>\n                        </Form.Item>\n                      </>\n                    );\n                  })}\n                </>\n              );\n            }}\n            \n          </Form.List>\n\n          <Button type=\"dashed\" onClick={addSlug} block>\n            <PlusOutlined /> Add Pretty Link\n          </Button>\n        </Form.Item>\n        \n        {/* Page */}\n        <Form.Item label=\"Page\">\n          <Input.Group>\n            <Input\n              placeholder=\"Title\"\n              onChange={handlePageTitle} />\n            <Input.TextArea\n              placeholder=\"Description\"\n              onChange={handlePageDescription} />\n          </Input.Group>\n        </Form.Item>\n\n        {/* Custom Fonts */}\n        <Form.Item label=\"Custom Fonts\">\n          <Input placeholder=\"Rubik, Noto Sans SC...\" onChange={handleCustomFonts} />\n        </Form.Item>\n        \n        {/* Custom Scripts */}\n        <Form.Item label=\"Custom Scripts\">\n          <Input.TextArea placeholder=\"Google Analytics...\" onChange={handleCustomScripts} />\n        </Form.Item>\n        \n        {/* Dark Mode */}\n        <Form.Item label=\"Use Dark Mode\">\n          <Switch\n            checkedChildren={<CheckOutlined />}\n            unCheckedChildren={<CloseOutlined />}\n            onChange={handleDarkMode}\n          />\n        </Form.Item>\n\n        {/* Copy */}\n        <Form.Item>\n          <CopyToClipboard\n            text={code}\n            onCopy={() => setCopied(true)}>\n            <Button\n              type=\"primary\"\n              icon={copied ? <CheckCircleOutlined /> : null}\n            >{ copied ? 'Copied!' : 'COPY THE CODE' }</Button>\n          </CopyToClipboard>\n          <SyntaxHighlighter\n            language=\"javascript\"\n            style={prism}\n            customStyle={{ maxHeight: '100vh', border: '1px solid #d9d9d9', borderRadius: '3px' }}\n          >\n            { code }\n          </SyntaxHighlighter>\n        </Form.Item>\n      </Form>\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}